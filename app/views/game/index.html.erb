<div id="wrapper">
    <div>
        <div style="text-align: center; display: inline-block; width: 20vw, width: 100%;">
            <canvas height="280px" width="500px" style="border:1px solid" id="mycanvas"></canvas>
            <div id="upgrade">Upgrade Tower Damage</div>
            <div id="money"></div>

        </div>

        <div class="draggable_tower1">
          <div draggable="true" class="drag_select" id="tower1"></div>
        </div>

        <div class="draggable_tower2">
          <div draggable="true" class="drag_select" id="tower2"></div>
        </div>

        <button id="start" class="button">start</button>
        <div id="pauseButton"></div>
        <button id="pause" class="button">pause</button>
        <audio id="songs">
            <source src="assets/themesong.mp3">
        </audio>
        <div id='directions'>
            <h1 id="instructions-title">HOW TO PLAY</h1>
            <p id="instructions">What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Why do we use it? It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).
                <!-- <div style= "text-align: center; display: inline-block; width: 20vw"> -->
                <!-- <canvas height="280px" width="500px" style="border:1px solid" id="mycanvas"></canvas> -->
                <!-- <img id="image"> -->
                <img id="image" width="80" , height="80" src="/assets/dawey.png">
            </p>
        </div>
    </div>
    <img id="image" width="80" , height="80" src="/assets/dawey.png" style="display:none">
    <img id="tower_image" width="50" , height="50" src="/assets/archer.png" style="display:none">
    <img id="tower_image1" width="50" , height="50" src="/assets/sword.png" style="display:none">
    <button type="button" id="play_button">Play Game</button>
    <script>

    // the information about goblin
    class Goblin {
        constructor(health) {
            this.canvas = document.getElementById('mycanvas');
            this.context = this.canvas.getContext("2d");
            this.health = health;
            this.x = -6.0;
            this.y = -25.0;
            this.speed = 2.0;
            this.image = document.getElementById("image");
            this.width = 80.0;
            this.height = 80.0;
        }
        draw() {
            this.context.drawImage(this.image, this.x, this.y, this.width, this.height);
        }
        update() {
            if (this.x < 360 && this.y == -25.0) {
                this.x += this.speed;
            }
            if (this.x == 360 && this.y < 135) {
                this.y += this.speed;
            }
            if (this.y == 135 && this.x > 48) {
                this.x -= this.speed;
            }
            if (this.x == 48 && this.y != -25.0 && this.y < 225) {
                this.y += this.speed;
            }
        }
    }

    var distance2;
    class Tower {
        constructor(x, y, damage) {
            this.canvas = document.getElementById('mycanvas');
            this.context = this.canvas.getContext("2d");
            this.damage = 1.0 * damage;
            this.towerImage = document.getElementById('tower_image');
            this.width = 45.0;
            this.height = 45.0;
            this.x = x;
            this.y = y;
            this.xcord = x - 25.0;
            this.ycord = y - 25.0;
            this.range = 80;
            this.target = null;
        }
        drawTower() {
            this.context.drawImage(this.towerImage, this.xcord, this.ycord, this.width, this.height);
        }
        findTarget() {
            if (mainloop.enemies.length === 0) {
                this.target = null;
            }
            for (var i = 0; i < mainloop.enemies.length; i++) {
                var distancex = Math.abs(mainloop.enemies[i].x + 37) - Math.abs(this.x + 12.5);
                var distancey = Math.abs(mainloop.enemies[i].y + 48) - Math.abs(this.y + 12.5);
                var distance = (distancex * distancex) + (distancey * distancey);
                var range = this.range * this.range;
                if (distance < range) {
                    this.target = mainloop.enemies[i];
                    return;

                }
                if (distance > (range)) {
                    this.target = null;
                }
            }
        }
    }

    class Tower1 {
        constructor(x, y) {
            this.canvas = document.getElementById('mycanvas');
            this.context = this.canvas.getContext("2d");
            this.damage = 1.0;
            this.towerImage1 = document.getElementById('tower_image1');
            this.width = 45.0;
            this.height = 45.0;
            this.x = x;
            this.y = y;
            this.xcord = x - 25.0;
            this.ycord = y - 25.0;
            this.range = 60;
            this.target = null;

        }
        drawTower1() {
            this.context.drawImage(this.towerImage1, this.xcord, this.ycord, this.width, this.height);
        }
        findTarget() {
            if (mainloop.enemies.length === 0) {
                this.target = null;
            }
            for (var i = 0; i < mainloop.enemies.length; i++) {
                var distancex = Math.abs(mainloop.enemies[i].x + 37) - Math.abs(this.x + 12.5);
                var distancey = Math.abs(mainloop.enemies[i].y + 48) - Math.abs(this.y + 12.5);
                var distance = (distancex * distancex) + (distancey * distancey);
                var range = this.range * this.range;
                if (distance < range) {
                    this.target = mainloop.enemies[i];
                    return;

                }
                if (distance > (range)) {
                    this.target = null;
                }
            }
        }

    }

    class Projectile {
        constructor(x, y, target, damage) {
            this.canvas = document.getElementById("mycanvas");
            this.content = canvas.getContext("2d");
            this.target = target;
            this.damage = damage;
            this.x = x;
            this.y = y;
        }
        draw() {
            this.content.moveTo(this.x, this.y);
            this.content.lineWidth = 3;
            this.content.strokeStyle = "red";
            this.content.lineTo(this.target.x + 40, this.target.y + 40);
            this.target.health -= this.damage;
            this.content.stroke();



        }
    }
    // the mainloop that runs the game
    class Game {
        constructor() {
            this.canvas = document.getElementById('mycanvas');
            this.context = this.canvas.getContext("2d");
            this.enemies = [];
            this.towers = [];
            this.towers1 =[];
            this.projectiles = [];
            this.check = false;
            this.check = true;
            this.checkroads = true;
            this.road_x = [0.0, 42.0, 84.0, 126.0, 168.0, 210.0, 252.0, 294.0, 336.0, 378.0, 384.0, 384.0, 384.0, 384.0, 384.0, 342.0, 298.0, 254.0, 210.0, 166.0, 122.0, 78.0, 74.0, 74.0];
            this.road_y = [11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 45.0, 79.0, 113.0, 147.0, 181.0, 178.0, 178.0, 178.0, 178.0, 178.0, 178.0, 178.0, 212.0, 246.0];
            this.cash = 100;
            this.count = 10;
            this.upgradeCost = 200;
            this.damage = 1;

        }
        addenemy(health) {
            var goblin = new Goblin(health);
            this.enemies.push(goblin);
        }
        addTower(xcord, ycord, damage) {
            var tower = new Tower(xcord, ycord, damage);
            this.checkroads = true;
            for (var z = 0; z < this.road_x.length; z ++){
              var distRoadX = (tower.x-10) - this.road_x[z];
              var distRoadY = (tower.y+6) - this.road_y[z];
              var distRoad = (distRoadX * distRoadX) + (distRoadY * distRoadY);
                if(distRoad < 2500){
                  this.checkroads = false;
                }


            if (this.towers.length == 0 && this.checkroads === true) {
                this.cash -=50;
                this.towers.push(tower);
            } else if (this.towers.length >= 1) {
                for (var i = 0; i < this.towers.length; i++) {
                    var distancex = Math.abs(tower.x - this.towers[i].x);
                    var distancey = Math.abs(tower.y - this.towers[i].y);
                    var distance = (distancex * distancex) + (distancey + distancey);
                    if (distance >= 400) {
                        this.check = true;
                    } else {
                    var distancex = (tower.x+20) - (this.towers[i].x+20);
                    var distancey = (tower.y+25) - (this.towers[i].y+25);
                    var distance = (distancex * distancex) + (distancey * distancey);
                    if (distance < 500) {

                        this.check = false;
                    }
                }
            if (this.check === true && this.checkroads ===true && this.cash >=50) {
              this.cash -= 50;
                this.towers.push(tower);
                this.check = false;
            }
        }
      }
      }
    }

        addTower1(xcord, ycord) {
            var tower1 = new Tower1(xcord, ycord);
            if (this.towers1.length == 0) {
                this.towers1.push(tower1);
            } else if (this.towers1.length >= 1) {
                for (var i = 0; i < this.towers1.length; i++) {
                    var distancex = Math.abs(tower1.x - this.towers1[i].x);
                    var distancey = Math.abs(tower1.y - this.towers1[i].y);
                    var distance = (distancex * distancex) + (distancey + distancey);
                    if (distance >= 400) {
                        this.check = true;
                    } else {
                        this.check = false;
                    }


            if (this.check === true) {
                this.towers1.push(tower1);
                this.check = false;
            }
          }
        }
      }

        addProjectile(x, y, target, damage) {
            var projectile = new Projectile(x, y, target, damage);
            this.projectiles.push(projectile);
        }
        draw() {
            this.context.beginPath();
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            for (let i = 0; i < this.enemies.length; i++) {
                this.enemies[i].draw();
            }
            for (let i = 0; i < this.towers.length; i++) {
                this.towers[i].drawTower();
            }
            for (let i = 0; i < this.towers1.length; i++) {
                this.towers1[i].drawTower1();
            }
            for (let i = 0; i < this.projectiles.length; i++) {
                if (this.projectiles[i] != null) {
                    this.projectiles[i].draw();
                    this.projectiles[i] = null;
                }
            }
          }
          upgradeTower(){
          this.damage= this.damage *2;
          this.cash -= this.upgradeCost;
          this.upgradeCost = this.upgradeCost * 3;
          }

        update() {
          document.getElementById('money').innerHTML= "Cash: " + this.cash;
            for (var i = 0; i < this.enemies.length; i++) {
                if ( this.enemies[i].health > 0){
                  this.enemies[i].update()
                    if( this.enemies[i].y == 225){
                      this.enemies.splice(i, i+1);
                    }
                }else if (this.enemies[i].health <= 0){
                  this.enemies.splice(i, 1);
                  this.count += 0.5;
                  this.cash += this.count/4;
                }
            }
            for (var i = 0; i < this.towers.length; i++) {
                this.towers[i].findTarget();
            }
            for (var i = 0; i < this.towers1.length; i++) {
                this.towers1[i].findTarget();
            }
        }
      }

    var mainloop = new Game();

    var playButton = document.getElementById('play_button');
    var xcord;
    var ycord;
    var rect;
    playButton.addEventListener('click', function() {


        setInterval(function () {
          mainloop.addenemy(mainloop.count/2);

        }, 2000);
        setInterval(function() {
            for (var i = 0; i < mainloop.towers.length; i++) {
                if (mainloop.towers[i].target != null) {
                    mainloop.addProjectile(mainloop.towers[i].x, mainloop.towers[i].y, mainloop.towers[i].target, mainloop.damage)
                }
            }
            for (var i = 0; i < mainloop.towers1.length; i++) {
                if (mainloop.towers1[i].target != null) {
                    mainloop.addProjectile(mainloop.towers1[i].x, mainloop.towers1[i].y, mainloop.towers1[i].target, mainloop.towers1[i].damage)
                }
            }
        }, 1000 / 2);
        setInterval(function() {
            mainloop.update();
            mainloop.draw();
        }, 1000 / 30);
    });


    // the spawner


    // refreshes the game renders the game

var towerArcher = document.getElementById('tower1')
    towerArcher.addEventListener('dragend', function(event) {
        canvas = document.getElementById('mycanvas');
        rect = canvas.getBoundingClientRect();
        mainloop.addTower((event.clientX) - rect.left, (event.clientY) - rect.top);
        // console.log(event.clientX - rect.left);
        // console.log(event.clientY - rect.top);
    });

  var towerSword = document.getElementById('tower2')
      towerSword.addEventListener('dragend', function(event) {
          canvas = document.getElementById('mycanvas');
          rect = canvas.getBoundingClientRect();
          mainloop.addTower1((event.clientX) - rect.left, (event.clientY) - rect.top);
          // console.log(event.clientX - rect.left);
          // console.log(event.clientY - rect.top);
      });

    //     mainloop.addTower((event.clientX) - rect.left, (event.clientY) - rect.top, mainloop.damage);
    //     console.log(event.clientX - rect.left);
    //     console.log(event.clientY - rect.top);
    //
    // })

    var upgrade = document.getElementById("upgrade");
    upgrade.addEventListener("click", function(){
      if (mainloop.cash >= mainloop.upgradeCost){
        mainloop.upgradeTower();

      }
    })
    </script>
